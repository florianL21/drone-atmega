
Drohne.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  000009f2  00000a86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000058  00800212  00800212  00000a98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ac8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bef  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001163  00000000  00000000  0000282f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae0  00000000  00000000  00003992  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c0  00000000  00000000  00004474  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000895  00000000  00000000  00004834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f80  00000000  00000000  000050c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00006049  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	62 c1       	rjmp	.+708    	; 0x32a <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	27 c1       	rjmp	.+590    	; 0x2bc <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ef       	ldi	r30, 0xF2	; 242
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 31       	cpi	r26, 0x12	; 18
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e1       	ldi	r26, 0x12	; 18
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 36       	cpi	r26, 0x6A	; 106
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	5e d0       	rcall	.+188    	; 0x1dc <main>
 120:	66 c4       	rjmp	.+2252   	; 0x9ee <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <queue_is_empty>:
	}
	free(queue);
	return true;
}

bool queue_is_empty(Queue *queue) {
 124:	fc 01       	movw	r30, r24
	if (queue == NULL || queue->front == NULL) {
 126:	89 2b       	or	r24, r25
 128:	39 f0       	breq	.+14     	; 0x138 <queue_is_empty+0x14>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	20 81       	ld	r18, Z
 12e:	31 81       	ldd	r19, Z+1	; 0x01
 130:	23 2b       	or	r18, r19
 132:	19 f0       	breq	.+6      	; 0x13a <queue_is_empty+0x16>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	08 95       	ret
		return true;
 138:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return false;
	}
}
 13a:	08 95       	ret

0000013c <queue_new>:

Queue *queue_new(void) {
	Queue *queue = malloc(sizeof(*queue));
 13c:	84 e0       	ldi	r24, 0x04	; 4
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	35 d3       	rcall	.+1642   	; 0x7ac <malloc>
	if (queue == NULL) {
 142:	00 97       	sbiw	r24, 0x00	; 0
 144:	29 f0       	breq	.+10     	; 0x150 <queue_new+0x14>
		return NULL;
	}
	queue->front = queue->back = NULL;
 146:	fc 01       	movw	r30, r24
 148:	13 82       	std	Z+3, r1	; 0x03
 14a:	12 82       	std	Z+2, r1	; 0x02
 14c:	11 82       	std	Z+1, r1	; 0x01
 14e:	10 82       	st	Z, r1
	return queue;
}
 150:	08 95       	ret

00000152 <queue_read>:

uint8_t queue_read(Queue *queue) {
 152:	cf 93       	push	r28
 154:	dc 01       	movw	r26, r24
	if (queue == NULL || queue->front == NULL) {
 156:	89 2b       	or	r24, r25
 158:	a9 f0       	breq	.+42     	; 0x184 <queue_read+0x32>
 15a:	ed 91       	ld	r30, X+
 15c:	fc 91       	ld	r31, X
 15e:	11 97       	sbiw	r26, 0x01	; 1
 160:	30 97       	sbiw	r30, 0x00	; 0
 162:	91 f0       	breq	.+36     	; 0x188 <queue_read+0x36>
		return 0;
	}
	struct queue_node *node = queue->front;
	uint8_t data = node->data;
 164:	c2 81       	ldd	r28, Z+2	; 0x02
	queue->front = node->next;
 166:	80 81       	ld	r24, Z
 168:	91 81       	ldd	r25, Z+1	; 0x01
 16a:	11 96       	adiw	r26, 0x01	; 1
 16c:	9c 93       	st	X, r25
 16e:	8e 93       	st	-X, r24
	if (queue->front == NULL) {
 170:	89 2b       	or	r24, r25
 172:	21 f4       	brne	.+8      	; 0x17c <queue_read+0x2a>
		queue->back = NULL;
 174:	13 96       	adiw	r26, 0x03	; 3
 176:	1c 92       	st	X, r1
 178:	1e 92       	st	-X, r1
 17a:	12 97       	sbiw	r26, 0x02	; 2
	}
	free(node);
 17c:	cf 01       	movw	r24, r30
 17e:	ae d3       	rcall	.+1884   	; 0x8dc <free>
	return data;
 180:	8c 2f       	mov	r24, r28
 182:	03 c0       	rjmp	.+6      	; 0x18a <queue_read+0x38>
	return queue;
}

uint8_t queue_read(Queue *queue) {
	if (queue == NULL || queue->front == NULL) {
		return 0;
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	01 c0       	rjmp	.+2      	; 0x18a <queue_read+0x38>
 188:	80 e0       	ldi	r24, 0x00	; 0
	if (queue->front == NULL) {
		queue->back = NULL;
	}
	free(node);
	return data;
}
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <queue_write>:

bool queue_write(Queue *queue, uint8_t data) {
 18e:	1f 93       	push	r17
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
	if (queue == NULL) {
 194:	00 97       	sbiw	r24, 0x00	; 0
 196:	d9 f0       	breq	.+54     	; 0x1ce <queue_write+0x40>
 198:	16 2f       	mov	r17, r22
 19a:	ec 01       	movw	r28, r24
		return false;
	}
	struct queue_node *node = malloc(sizeof(*node));
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	05 d3       	rcall	.+1546   	; 0x7ac <malloc>
	if (node == NULL) {
 1a2:	00 97       	sbiw	r24, 0x00	; 0
 1a4:	b1 f0       	breq	.+44     	; 0x1d2 <queue_write+0x44>
		return false;
	}
	node->data = data;
 1a6:	fc 01       	movw	r30, r24
 1a8:	12 83       	std	Z+2, r17	; 0x02
	node->next = NULL;
 1aa:	11 82       	std	Z+1, r1	; 0x01
 1ac:	10 82       	st	Z, r1
	if (queue->back == NULL) {
 1ae:	ea 81       	ldd	r30, Y+2	; 0x02
 1b0:	fb 81       	ldd	r31, Y+3	; 0x03
 1b2:	30 97       	sbiw	r30, 0x00	; 0
 1b4:	31 f4       	brne	.+12     	; 0x1c2 <queue_write+0x34>
		queue->front = queue->back = node;
 1b6:	9b 83       	std	Y+3, r25	; 0x03
 1b8:	8a 83       	std	Y+2, r24	; 0x02
 1ba:	99 83       	std	Y+1, r25	; 0x01
 1bc:	88 83       	st	Y, r24
		} else {
		queue->back->next = node;
		queue->back = node;
	}
	return true;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	09 c0       	rjmp	.+18     	; 0x1d4 <queue_write+0x46>
	node->data = data;
	node->next = NULL;
	if (queue->back == NULL) {
		queue->front = queue->back = node;
		} else {
		queue->back->next = node;
 1c2:	91 83       	std	Z+1, r25	; 0x01
 1c4:	80 83       	st	Z, r24
		queue->back = node;
 1c6:	9b 83       	std	Y+3, r25	; 0x03
 1c8:	8a 83       	std	Y+2, r24	; 0x02
	}
	return true;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <queue_write+0x46>
	return data;
}

bool queue_write(Queue *queue, uint8_t data) {
	if (queue == NULL) {
		return false;
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <queue_write+0x46>
	}
	struct queue_node *node = malloc(sizeof(*node));
	if (node == NULL) {
		return false;
 1d2:	80 e0       	ldi	r24, 0x00	; 0
		} else {
		queue->back->next = node;
		queue->back = node;
	}
	return true;
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	08 95       	ret

000001dc <main>:
#include "ESCControl.h"
#include "UARTCOM.h"
#include "HelperFunctions.h"

int main(void)
{
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	1f 92       	push	r1
 1e2:	1f 92       	push	r1
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
	uint8_t dataArray[] = {0,0};
 1e8:	19 82       	std	Y+1, r1	; 0x01
 1ea:	1a 82       	std	Y+2, r1	; 0x02
	UARTCOM_init(57600);
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	71 ee       	ldi	r23, 0xE1	; 225
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	c9 d0       	rcall	.+402    	; 0x388 <UARTCOM_init>
	sei();
 1f6:	78 94       	sei
	UARTCOM_sendDebug("START");
 1f8:	87 e0       	ldi	r24, 0x07	; 7
 1fa:	92 e0       	ldi	r25, 0x02	; 2
    while (1) 
    {
		if(UARTCOM_ready_to_send())
 1fc:	55 d2       	rcall	.+1194   	; 0x6a8 <UARTCOM_sendDebug>
 1fe:	c9 d0       	rcall	.+402    	; 0x392 <UARTCOM_ready_to_send>
 200:	88 23       	and	r24, r24
 202:	e9 f3       	breq	.-6      	; 0x1fe <main+0x22>
		{
			dataArray[0]++;
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	8f 5f       	subi	r24, 0xFF	; 255
 208:	89 83       	std	Y+1, r24	; 0x01
			if(!UARTCOM_transmit_block('0'+dataArray[1],ARRAYDEF(dataArray)))
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
 20c:	42 e0       	ldi	r20, 0x02	; 2
 20e:	be 01       	movw	r22, r28
 210:	6f 5f       	subi	r22, 0xFF	; 255
 212:	7f 4f       	sbci	r23, 0xFF	; 255
 214:	80 5d       	subi	r24, 0xD0	; 208
 216:	67 d2       	rcall	.+1230   	; 0x6e6 <UARTCOM_transmit_block>
 218:	81 11       	cpse	r24, r1
			{
				UARTCOM_sendDebug("STOP");
 21a:	03 c0       	rjmp	.+6      	; 0x222 <main+0x46>
 21c:	8d e0       	ldi	r24, 0x0D	; 13
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	43 d2       	rcall	.+1158   	; 0x6a8 <UARTCOM_sendDebug>
			}
			if(dataArray[0] == 255)
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	8f 3f       	cpi	r24, 0xFF	; 255
 226:	59 f7       	brne	.-42     	; 0x1fe <main+0x22>
				dataArray[1]++;
 228:	8a 81       	ldd	r24, Y+2	; 0x02
 22a:	8f 5f       	subi	r24, 0xFF	; 255
 22c:	8a 83       	std	Y+2, r24	; 0x02
 22e:	e7 cf       	rjmp	.-50     	; 0x1fe <main+0x22>

00000230 <uart0_init>:
	uint8_t Length = strlen(Data);
	for (uint8_t i = 0; i < Length; i++)
	{
		uart0_putc(Data[i]);
	}
}
 230:	9b 01       	movw	r18, r22
 232:	ac 01       	movw	r20, r24
 234:	60 e4       	ldi	r22, 0x40	; 64
 236:	72 e4       	ldi	r23, 0x42	; 66
 238:	8f e0       	ldi	r24, 0x0F	; 15
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	95 d2       	rcall	.+1322   	; 0x768 <__udivmodsi4>
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	31 09       	sbc	r19, r1
 242:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 246:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 24a:	e1 ec       	ldi	r30, 0xC1	; 193
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	88 60       	ori	r24, 0x08	; 8
 252:	80 83       	st	Z, r24
 254:	80 81       	ld	r24, Z
 256:	80 61       	ori	r24, 0x10	; 16
 258:	80 83       	st	Z, r24
 25a:	a2 ec       	ldi	r26, 0xC2	; 194
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	8c 91       	ld	r24, X
 260:	87 7c       	andi	r24, 0xC7	; 199
 262:	8c 93       	st	X, r24
 264:	80 81       	ld	r24, Z
 266:	8b 7f       	andi	r24, 0xFB	; 251
 268:	80 83       	st	Z, r24
 26a:	8c 91       	ld	r24, X
 26c:	86 60       	ori	r24, 0x06	; 6
 26e:	8c 93       	st	X, r24
 270:	80 81       	ld	r24, Z
 272:	80 64       	ori	r24, 0x40	; 64
 274:	80 83       	st	Z, r24
 276:	80 81       	ld	r24, Z
 278:	80 68       	ori	r24, 0x80	; 128
 27a:	80 83       	st	Z, r24
 27c:	5f df       	rcall	.-322    	; 0x13c <queue_new>
 27e:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <uartSendBuffer+0x1>
 282:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <uartSendBuffer>
 286:	08 95       	ret

00000288 <uart0_putc>:
 288:	68 2f       	mov	r22, r24
 28a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <uartSendBuffer>
 28e:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <uartSendBuffer+0x1>
 292:	7d df       	rcall	.-262    	; 0x18e <queue_write>
 294:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <sendingActive>
 298:	81 11       	cpse	r24, r1
 29a:	0a c0       	rjmp	.+20     	; 0x2b0 <uart0_putc+0x28>
 29c:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <uartSendBuffer>
 2a0:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <uartSendBuffer+0x1>
 2a4:	56 df       	rcall	.-340    	; 0x152 <queue_read>
 2a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <sendingActive>
 2b0:	08 95       	ret

000002b2 <uart0_register_recived_callback>:
	}
}

void uart0_register_recived_callback(UART_RECV_CALLBACK callBack)
{
	reciveCallBack = callBack;
 2b2:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__data_end+0x1>
 2b6:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
 2ba:	08 95       	ret

000002bc <__vector_27>:
}

ISR(USART0_TX_vect)
{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	0b b6       	in	r0, 0x3b	; 59
 2c8:	0f 92       	push	r0
 2ca:	2f 93       	push	r18
 2cc:	3f 93       	push	r19
 2ce:	4f 93       	push	r20
 2d0:	5f 93       	push	r21
 2d2:	6f 93       	push	r22
 2d4:	7f 93       	push	r23
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
	if(queue_is_empty(uartSendBuffer))
 2e2:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <uartSendBuffer>
 2e6:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <uartSendBuffer+0x1>
 2ea:	1c df       	rcall	.-456    	; 0x124 <queue_is_empty>
 2ec:	88 23       	and	r24, r24
 2ee:	19 f0       	breq	.+6      	; 0x2f6 <__vector_27+0x3a>
	{
		sendingActive = false;
 2f0:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <sendingActive>
 2f4:	07 c0       	rjmp	.+14     	; 0x304 <__vector_27+0x48>
	} else
	{
		UDR0 = queue_read(uartSendBuffer);
 2f6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <uartSendBuffer>
 2fa:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <uartSendBuffer+0x1>
 2fe:	29 df       	rcall	.-430    	; 0x152 <queue_read>
 300:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
 304:	ff 91       	pop	r31
 306:	ef 91       	pop	r30
 308:	bf 91       	pop	r27
 30a:	af 91       	pop	r26
 30c:	9f 91       	pop	r25
 30e:	8f 91       	pop	r24
 310:	7f 91       	pop	r23
 312:	6f 91       	pop	r22
 314:	5f 91       	pop	r21
 316:	4f 91       	pop	r20
 318:	3f 91       	pop	r19
 31a:	2f 91       	pop	r18
 31c:	0f 90       	pop	r0
 31e:	0b be       	out	0x3b, r0	; 59
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <__vector_25>:

ISR(USART0_RX_vect)
{
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	0b b6       	in	r0, 0x3b	; 59
 336:	0f 92       	push	r0
 338:	2f 93       	push	r18
 33a:	3f 93       	push	r19
 33c:	4f 93       	push	r20
 33e:	5f 93       	push	r21
 340:	6f 93       	push	r22
 342:	7f 93       	push	r23
 344:	8f 93       	push	r24
 346:	9f 93       	push	r25
 348:	af 93       	push	r26
 34a:	bf 93       	push	r27
 34c:	ef 93       	push	r30
 34e:	ff 93       	push	r31
	if(reciveCallBack != NULL)
 350:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <__data_end>
 354:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <__data_end+0x1>
 358:	30 97       	sbiw	r30, 0x00	; 0
 35a:	19 f0       	breq	.+6      	; 0x362 <__vector_25+0x38>
	{
		reciveCallBack(UDR0);
 35c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 360:	19 95       	eicall
	}
}
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	bf 91       	pop	r27
 368:	af 91       	pop	r26
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	7f 91       	pop	r23
 370:	6f 91       	pop	r22
 372:	5f 91       	pop	r21
 374:	4f 91       	pop	r20
 376:	3f 91       	pop	r19
 378:	2f 91       	pop	r18
 37a:	0f 90       	pop	r0
 37c:	0b be       	out	0x3b, r0	; 59
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <UARTCOM_init>:
{
	transmit_block(get_data_block(2,&Number,1));
}

void UARTCOM_init(uint32_t BaudRate)
{
 388:	53 df       	rcall	.-346    	; 0x230 <uart0_init>
 38a:	88 e8       	ldi	r24, 0x88	; 136
 38c:	92 e0       	ldi	r25, 0x02	; 2
 38e:	91 cf       	rjmp	.-222    	; 0x2b2 <uart0_register_recived_callback>
 390:	08 95       	ret

00000392 <UARTCOM_ready_to_send>:
 392:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <readyToSend>
 396:	08 95       	ret

00000398 <transmit_block>:
 398:	ef 92       	push	r14
 39a:	ff 92       	push	r15
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	28 97       	sbiw	r28, 0x08	; 8
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
 3b4:	29 83       	std	Y+1, r18	; 0x01
 3b6:	f3 2e       	mov	r15, r19
 3b8:	3a 83       	std	Y+2, r19	; 0x02
 3ba:	4b 83       	std	Y+3, r20	; 0x03
 3bc:	5c 83       	std	Y+4, r21	; 0x04
 3be:	6d 83       	std	Y+5, r22	; 0x05
 3c0:	7e 83       	std	Y+6, r23	; 0x06
 3c2:	8f 83       	std	Y+7, r24	; 0x07
 3c4:	98 87       	std	Y+8, r25	; 0x08
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	5f df       	rcall	.-322    	; 0x288 <uart0_putc>
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	5d df       	rcall	.-326    	; 0x288 <uart0_putc>
 3ce:	8f 2d       	mov	r24, r15
 3d0:	5b df       	rcall	.-330    	; 0x288 <uart0_putc>
 3d2:	ff 20       	and	r15, r15
 3d4:	b9 f0       	breq	.+46     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3d6:	00 e0       	ldi	r16, 0x00	; 0
 3d8:	10 e0       	ldi	r17, 0x00	; 0
 3da:	eb 81       	ldd	r30, Y+3	; 0x03
 3dc:	fc 81       	ldd	r31, Y+4	; 0x04
 3de:	e0 0f       	add	r30, r16
 3e0:	f1 1f       	adc	r31, r17
 3e2:	80 81       	ld	r24, Z
 3e4:	51 df       	rcall	.-350    	; 0x288 <uart0_putc>
 3e6:	0f 5f       	subi	r16, 0xFF	; 255
 3e8:	1f 4f       	sbci	r17, 0xFF	; 255
 3ea:	0f 15       	cp	r16, r15
 3ec:	b0 f3       	brcs	.-20     	; 0x3da <transmit_block+0x42>
 3ee:	0a c0       	rjmp	.+20     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f0:	f8 01       	movw	r30, r16
 3f2:	81 91       	ld	r24, Z+
 3f4:	8f 01       	movw	r16, r30
 3f6:	48 df       	rcall	.-368    	; 0x288 <uart0_putc>
 3f8:	0e 15       	cp	r16, r14
 3fa:	1f 05       	cpc	r17, r15
 3fc:	c9 f7       	brne	.-14     	; 0x3f0 <transmit_block+0x58>
 3fe:	84 e0       	ldi	r24, 0x04	; 4
 400:	43 df       	rcall	.-378    	; 0x288 <uart0_putc>
 402:	08 c0       	rjmp	.+16     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 404:	8e 01       	movw	r16, r28
 406:	0b 5f       	subi	r16, 0xFB	; 251
 408:	1f 4f       	sbci	r17, 0xFF	; 255
 40a:	7e 01       	movw	r14, r28
 40c:	f9 e0       	ldi	r31, 0x09	; 9
 40e:	ef 0e       	add	r14, r31
 410:	f1 1c       	adc	r15, r1
 412:	ee cf       	rjmp	.-36     	; 0x3f0 <transmit_block+0x58>
 414:	28 96       	adiw	r28, 0x08	; 8
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	f8 94       	cli
 41a:	de bf       	out	0x3e, r29	; 62
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	cd bf       	out	0x3d, r28	; 61
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	0f 91       	pop	r16
 428:	ff 90       	pop	r15
 42a:	ef 90       	pop	r14
 42c:	08 95       	ret

0000042e <parseRecvData>:
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
 436:	28 97       	sbiw	r28, 0x08	; 8
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61
 442:	e2 2f       	mov	r30, r18
 444:	29 83       	std	Y+1, r18	; 0x01
 446:	3a 83       	std	Y+2, r19	; 0x02
 448:	4b 83       	std	Y+3, r20	; 0x03
 44a:	5c 83       	std	Y+4, r21	; 0x04
 44c:	6d 83       	std	Y+5, r22	; 0x05
 44e:	7e 83       	std	Y+6, r23	; 0x06
 450:	8f 83       	std	Y+7, r24	; 0x07
 452:	98 87       	std	Y+8, r25	; 0x08
 454:	8e 2f       	mov	r24, r30
 456:	e6 30       	cpi	r30, 0x06	; 6
 458:	41 f4       	brne	.+16     	; 0x46a <parseRecvData+0x3c>
 45a:	31 11       	cpse	r19, r1
 45c:	23 c0       	rjmp	.+70     	; 0x4a4 <parseRecvData+0x76>
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <readyToSend>
 464:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <tempData>
 468:	4a c0       	rjmp	.+148    	; 0x4fe <parseRecvData+0xd0>
 46a:	e5 31       	cpi	r30, 0x15	; 21
 46c:	c9 f4       	brne	.+50     	; 0x4a0 <parseRecvData+0x72>
 46e:	31 11       	cpse	r19, r1
 470:	19 c0       	rjmp	.+50     	; 0x4a4 <parseRecvData+0x76>
 472:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <tempData>
 476:	88 23       	and	r24, r24
 478:	09 f4       	brne	.+2      	; 0x47c <parseRecvData+0x4e>
 47a:	41 c0       	rjmp	.+130    	; 0x4fe <parseRecvData+0xd0>
 47c:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <tempData>
 480:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <tempData+0x1>
 484:	40 91 60 02 	lds	r20, 0x0260	; 0x800260 <tempData+0x2>
 488:	50 91 61 02 	lds	r21, 0x0261	; 0x800261 <tempData+0x3>
 48c:	60 91 62 02 	lds	r22, 0x0262	; 0x800262 <tempData+0x4>
 490:	70 91 63 02 	lds	r23, 0x0263	; 0x800263 <tempData+0x5>
 494:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <tempData+0x6>
 498:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <tempData+0x7>
 49c:	7d df       	rcall	.-262    	; 0x398 <transmit_block>
 49e:	2f c0       	rjmp	.+94     	; 0x4fe <parseRecvData+0xd0>
 4a0:	ee 23       	and	r30, r30
 4a2:	69 f1       	breq	.+90     	; 0x4fe <parseRecvData+0xd0>
 4a4:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <numReciveListeners>
 4a8:	99 23       	and	r25, r25
 4aa:	49 f1       	breq	.+82     	; 0x4fe <parseRecvData+0xd0>
 4ac:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <reciveListeners>
 4b0:	98 17       	cp	r25, r24
 4b2:	79 f0       	breq	.+30     	; 0x4d2 <parseRecvData+0xa4>
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	1e c0       	rjmp	.+60     	; 0x4f4 <parseRecvData+0xc6>
 4b8:	49 2f       	mov	r20, r25
 4ba:	50 e0       	ldi	r21, 0x00	; 0
 4bc:	fa 01       	movw	r30, r20
 4be:	ee 0f       	add	r30, r30
 4c0:	ff 1f       	adc	r31, r31
 4c2:	e4 0f       	add	r30, r20
 4c4:	f5 1f       	adc	r31, r21
 4c6:	ee 5d       	subi	r30, 0xDE	; 222
 4c8:	fd 4f       	sbci	r31, 0xFD	; 253
 4ca:	20 81       	ld	r18, Z
 4cc:	82 13       	cpse	r24, r18
 4ce:	12 c0       	rjmp	.+36     	; 0x4f4 <parseRecvData+0xc6>
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <parseRecvData+0xa8>
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	fa 01       	movw	r30, r20
 4d8:	ee 0f       	add	r30, r30
 4da:	ff 1f       	adc	r31, r31
 4dc:	4e 0f       	add	r20, r30
 4de:	5f 1f       	adc	r21, r31
 4e0:	fa 01       	movw	r30, r20
 4e2:	ee 5d       	subi	r30, 0xDE	; 222
 4e4:	fd 4f       	sbci	r31, 0xFD	; 253
 4e6:	01 80       	ldd	r0, Z+1	; 0x01
 4e8:	f2 81       	ldd	r31, Z+2	; 0x02
 4ea:	e0 2d       	mov	r30, r0
 4ec:	6b 81       	ldd	r22, Y+3	; 0x03
 4ee:	7c 81       	ldd	r23, Y+4	; 0x04
 4f0:	19 95       	eicall
 4f2:	05 c0       	rjmp	.+10     	; 0x4fe <parseRecvData+0xd0>
 4f4:	9f 5f       	subi	r25, 0xFF	; 255
 4f6:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <numReciveListeners>
 4fa:	92 17       	cp	r25, r18
 4fc:	e8 f2       	brcs	.-70     	; 0x4b8 <parseRecvData+0x8a>
 4fe:	28 96       	adiw	r28, 0x08	; 8
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	de bf       	out	0x3e, r29	; 62
 506:	0f be       	out	0x3f, r0	; 63
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <uart_recived_char>:
 510:	0f 93       	push	r16
 512:	1f 93       	push	r17
 514:	cf 93       	push	r28
 516:	c8 2f       	mov	r28, r24
 518:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <recvState>
 51c:	82 30       	cpi	r24, 0x02	; 2
 51e:	21 f1       	breq	.+72     	; 0x568 <uart_recived_char+0x58>
 520:	28 f4       	brcc	.+10     	; 0x52c <uart_recived_char+0x1c>
 522:	88 23       	and	r24, r24
 524:	59 f0       	breq	.+22     	; 0x53c <uart_recived_char+0x2c>
 526:	81 30       	cpi	r24, 0x01	; 1
 528:	99 f0       	breq	.+38     	; 0x550 <uart_recived_char+0x40>
 52a:	72 c0       	rjmp	.+228    	; 0x610 <uart_recived_char+0x100>
 52c:	84 30       	cpi	r24, 0x04	; 4
 52e:	09 f4       	brne	.+2      	; 0x532 <uart_recived_char+0x22>
 530:	47 c0       	rjmp	.+142    	; 0x5c0 <uart_recived_char+0xb0>
 532:	70 f1       	brcs	.+92     	; 0x590 <uart_recived_char+0x80>
 534:	85 30       	cpi	r24, 0x05	; 5
 536:	09 f4       	brne	.+2      	; 0x53a <uart_recived_char+0x2a>
 538:	56 c0       	rjmp	.+172    	; 0x5e6 <uart_recived_char+0xd6>
 53a:	6a c0       	rjmp	.+212    	; 0x610 <uart_recived_char+0x100>
 53c:	c2 30       	cpi	r28, 0x02	; 2
 53e:	21 f4       	brne	.+8      	; 0x548 <uart_recived_char+0x38>
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <recvState>
 546:	64 c0       	rjmp	.+200    	; 0x610 <uart_recived_char+0x100>
 548:	86 e0       	ldi	r24, 0x06	; 6
 54a:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <recvState>
 54e:	60 c0       	rjmp	.+192    	; 0x610 <uart_recived_char+0x100>
 550:	c0 93 16 02 	sts	0x0216, r28	; 0x800216 <receivedData.2004>
 554:	cc 23       	and	r28, r28
 556:	21 f0       	breq	.+8      	; 0x560 <uart_recived_char+0x50>
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <recvState>
 55e:	58 c0       	rjmp	.+176    	; 0x610 <uart_recived_char+0x100>
 560:	86 e0       	ldi	r24, 0x06	; 6
 562:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <recvState>
 566:	54 c0       	rjmp	.+168    	; 0x610 <uart_recived_char+0x100>
 568:	06 e1       	ldi	r16, 0x16	; 22
 56a:	12 e0       	ldi	r17, 0x02	; 2
 56c:	f8 01       	movw	r30, r16
 56e:	c1 83       	std	Z+1, r28	; 0x01
 570:	8c 2f       	mov	r24, r28
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	1b d1       	rcall	.+566    	; 0x7ac <malloc>
 576:	f8 01       	movw	r30, r16
 578:	93 83       	std	Z+3, r25	; 0x03
 57a:	82 83       	std	Z+2, r24	; 0x02
 57c:	cc 23       	and	r28, r28
 57e:	21 f0       	breq	.+8      	; 0x588 <uart_recived_char+0x78>
 580:	83 e0       	ldi	r24, 0x03	; 3
 582:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <recvState>
 586:	44 c0       	rjmp	.+136    	; 0x610 <uart_recived_char+0x100>
 588:	84 e0       	ldi	r24, 0x04	; 4
 58a:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <recvState>
 58e:	40 c0       	rjmp	.+128    	; 0x610 <uart_recived_char+0x100>
 590:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <CharCounter.2005>
 594:	a6 e1       	ldi	r26, 0x16	; 22
 596:	b2 e0       	ldi	r27, 0x02	; 2
 598:	12 96       	adiw	r26, 0x02	; 2
 59a:	ed 91       	ld	r30, X+
 59c:	fc 91       	ld	r31, X
 59e:	13 97       	sbiw	r26, 0x03	; 3
 5a0:	e8 0f       	add	r30, r24
 5a2:	f1 1d       	adc	r31, r1
 5a4:	c0 83       	st	Z, r28
 5a6:	8f 5f       	subi	r24, 0xFF	; 255
 5a8:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <CharCounter.2005>
 5ac:	11 96       	adiw	r26, 0x01	; 1
 5ae:	9c 91       	ld	r25, X
 5b0:	89 17       	cp	r24, r25
 5b2:	70 f1       	brcs	.+92     	; 0x610 <uart_recived_char+0x100>
 5b4:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <CharCounter.2005>
 5b8:	84 e0       	ldi	r24, 0x04	; 4
 5ba:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <recvState>
 5be:	28 c0       	rjmp	.+80     	; 0x610 <uart_recived_char+0x100>
 5c0:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <CharCounter.2005>
 5c4:	e8 2f       	mov	r30, r24
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	ea 5e       	subi	r30, 0xEA	; 234
 5ca:	fd 4f       	sbci	r31, 0xFD	; 253
 5cc:	c4 83       	std	Z+4, r28	; 0x04
 5ce:	8f 5f       	subi	r24, 0xFF	; 255
 5d0:	84 30       	cpi	r24, 0x04	; 4
 5d2:	18 f4       	brcc	.+6      	; 0x5da <uart_recived_char+0xca>
 5d4:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <CharCounter.2005>
 5d8:	1b c0       	rjmp	.+54     	; 0x610 <uart_recived_char+0x100>
 5da:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <CharCounter.2005>
 5de:	85 e0       	ldi	r24, 0x05	; 5
 5e0:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <recvState>
 5e4:	15 c0       	rjmp	.+42     	; 0x610 <uart_recived_char+0x100>
 5e6:	c4 30       	cpi	r28, 0x04	; 4
 5e8:	89 f4       	brne	.+34     	; 0x60c <uart_recived_char+0xfc>
 5ea:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <receivedData.2004>
 5ee:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <receivedData.2004+0x1>
 5f2:	40 91 18 02 	lds	r20, 0x0218	; 0x800218 <receivedData.2004+0x2>
 5f6:	50 91 19 02 	lds	r21, 0x0219	; 0x800219 <receivedData.2004+0x3>
 5fa:	60 91 1a 02 	lds	r22, 0x021A	; 0x80021a <receivedData.2004+0x4>
 5fe:	70 91 1b 02 	lds	r23, 0x021B	; 0x80021b <receivedData.2004+0x5>
 602:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <receivedData.2004+0x6>
 606:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <receivedData.2004+0x7>
 60a:	11 df       	rcall	.-478    	; 0x42e <parseRecvData>
 60c:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <recvState>
 610:	cf 91       	pop	r28
 612:	1f 91       	pop	r17
 614:	0f 91       	pop	r16
 616:	08 95       	ret

00000618 <get_data_block>:
 618:	ff 92       	push	r15
 61a:	0f 93       	push	r16
 61c:	1f 93       	push	r17
 61e:	cf 93       	push	r28
 620:	df 93       	push	r29
 622:	cd b7       	in	r28, 0x3d	; 61
 624:	de b7       	in	r29, 0x3e	; 62
 626:	60 97       	sbiw	r28, 0x10	; 16
 628:	0f b6       	in	r0, 0x3f	; 63
 62a:	f8 94       	cli
 62c:	de bf       	out	0x3e, r29	; 62
 62e:	0f be       	out	0x3f, r0	; 63
 630:	cd bf       	out	0x3d, r28	; 61
 632:	8b 01       	movw	r16, r22
 634:	f4 2e       	mov	r15, r20
 636:	4a 87       	std	Y+10, r20	; 0x0a
 638:	89 87       	std	Y+9, r24	; 0x09
 63a:	84 2f       	mov	r24, r20
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	b6 d0       	rcall	.+364    	; 0x7ac <malloc>
 640:	8b 87       	std	Y+11, r24	; 0x0b
 642:	9c 87       	std	Y+12, r25	; 0x0c
 644:	ff 20       	and	r15, r15
 646:	79 f0       	breq	.+30     	; 0x666 <get_data_block+0x4e>
 648:	f8 01       	movw	r30, r16
 64a:	a8 2f       	mov	r26, r24
 64c:	b9 2f       	mov	r27, r25
 64e:	fa 94       	dec	r15
 650:	6f 2d       	mov	r22, r15
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	6f 5f       	subi	r22, 0xFF	; 255
 656:	7f 4f       	sbci	r23, 0xFF	; 255
 658:	60 0f       	add	r22, r16
 65a:	71 1f       	adc	r23, r17
 65c:	81 91       	ld	r24, Z+
 65e:	8d 93       	st	X+, r24
 660:	e6 17       	cp	r30, r22
 662:	f7 07       	cpc	r31, r23
 664:	d9 f7       	brne	.-10     	; 0x65c <get_data_block+0x44>
 666:	1d 86       	std	Y+13, r1	; 0x0d
 668:	1e 86       	std	Y+14, r1	; 0x0e
 66a:	1f 86       	std	Y+15, r1	; 0x0f
 66c:	18 8a       	std	Y+16, r1	; 0x10
 66e:	88 e0       	ldi	r24, 0x08	; 8
 670:	fe 01       	movw	r30, r28
 672:	39 96       	adiw	r30, 0x09	; 9
 674:	de 01       	movw	r26, r28
 676:	11 96       	adiw	r26, 0x01	; 1
 678:	01 90       	ld	r0, Z+
 67a:	0d 92       	st	X+, r0
 67c:	8a 95       	dec	r24
 67e:	e1 f7       	brne	.-8      	; 0x678 <get_data_block+0x60>
 680:	29 81       	ldd	r18, Y+1	; 0x01
 682:	3a 81       	ldd	r19, Y+2	; 0x02
 684:	4b 81       	ldd	r20, Y+3	; 0x03
 686:	5c 81       	ldd	r21, Y+4	; 0x04
 688:	6d 81       	ldd	r22, Y+5	; 0x05
 68a:	7e 81       	ldd	r23, Y+6	; 0x06
 68c:	8f 81       	ldd	r24, Y+7	; 0x07
 68e:	98 85       	ldd	r25, Y+8	; 0x08
 690:	60 96       	adiw	r28, 0x10	; 16
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	f8 94       	cli
 696:	de bf       	out	0x3e, r29	; 62
 698:	0f be       	out	0x3f, r0	; 63
 69a:	cd bf       	out	0x3d, r28	; 61
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	1f 91       	pop	r17
 6a2:	0f 91       	pop	r16
 6a4:	ff 90       	pop	r15
 6a6:	08 95       	ret

000006a8 <UARTCOM_sendDebug>:
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
 6b0:	28 97       	sbiw	r28, 0x08	; 8
 6b2:	0f b6       	in	r0, 0x3f	; 63
 6b4:	f8 94       	cli
 6b6:	de bf       	out	0x3e, r29	; 62
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	cd bf       	out	0x3d, r28	; 61
 6bc:	fc 01       	movw	r30, r24
 6be:	01 90       	ld	r0, Z+
 6c0:	00 20       	and	r0, r0
 6c2:	e9 f7       	brne	.-6      	; 0x6be <UARTCOM_sendDebug+0x16>
 6c4:	31 97       	sbiw	r30, 0x01	; 1
 6c6:	af 01       	movw	r20, r30
 6c8:	48 1b       	sub	r20, r24
 6ca:	59 0b       	sbc	r21, r25
 6cc:	bc 01       	movw	r22, r24
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	a3 df       	rcall	.-186    	; 0x618 <get_data_block>
 6d2:	62 de       	rcall	.-828    	; 0x398 <transmit_block>
 6d4:	28 96       	adiw	r28, 0x08	; 8
 6d6:	0f b6       	in	r0, 0x3f	; 63
 6d8:	f8 94       	cli
 6da:	de bf       	out	0x3e, r29	; 62
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	cd bf       	out	0x3d, r28	; 61
 6e0:	df 91       	pop	r29
 6e2:	cf 91       	pop	r28
 6e4:	08 95       	ret

000006e6 <UARTCOM_transmit_block>:
 6e6:	0f 93       	push	r16
 6e8:	1f 93       	push	r17
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
 6ee:	cd b7       	in	r28, 0x3d	; 61
 6f0:	de b7       	in	r29, 0x3e	; 62
 6f2:	28 97       	sbiw	r28, 0x08	; 8
 6f4:	0f b6       	in	r0, 0x3f	; 63
 6f6:	f8 94       	cli
 6f8:	de bf       	out	0x3e, r29	; 62
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	cd bf       	out	0x3d, r28	; 61
 6fe:	18 2f       	mov	r17, r24
 700:	8b df       	rcall	.-234    	; 0x618 <get_data_block>
 702:	29 83       	std	Y+1, r18	; 0x01
 704:	3a 83       	std	Y+2, r19	; 0x02
 706:	4b 83       	std	Y+3, r20	; 0x03
 708:	5c 83       	std	Y+4, r21	; 0x04
 70a:	6d 83       	std	Y+5, r22	; 0x05
 70c:	7e 83       	std	Y+6, r23	; 0x06
 70e:	8f 83       	std	Y+7, r24	; 0x07
 710:	98 87       	std	Y+8, r25	; 0x08
 712:	83 2f       	mov	r24, r19
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	3d de       	rcall	.-902    	; 0x392 <UARTCOM_ready_to_send>
 718:	08 2f       	mov	r16, r24
 71a:	88 23       	and	r24, r24
 71c:	c9 f0       	breq	.+50     	; 0x750 <UARTCOM_transmit_block+0x6a>
 71e:	13 50       	subi	r17, 0x03	; 3
 720:	18 39       	cpi	r17, 0x98	; 152
 722:	a8 f4       	brcc	.+42     	; 0x74e <UARTCOM_transmit_block+0x68>
 724:	88 e0       	ldi	r24, 0x08	; 8
 726:	fe 01       	movw	r30, r28
 728:	31 96       	adiw	r30, 0x01	; 1
 72a:	ae e5       	ldi	r26, 0x5E	; 94
 72c:	b2 e0       	ldi	r27, 0x02	; 2
 72e:	01 90       	ld	r0, Z+
 730:	0d 92       	st	X+, r0
 732:	8a 95       	dec	r24
 734:	e1 f7       	brne	.-8      	; 0x72e <UARTCOM_transmit_block+0x48>
 736:	29 81       	ldd	r18, Y+1	; 0x01
 738:	3a 81       	ldd	r19, Y+2	; 0x02
 73a:	4b 81       	ldd	r20, Y+3	; 0x03
 73c:	5c 81       	ldd	r21, Y+4	; 0x04
 73e:	6d 81       	ldd	r22, Y+5	; 0x05
 740:	7e 81       	ldd	r23, Y+6	; 0x06
 742:	8f 81       	ldd	r24, Y+7	; 0x07
 744:	98 85       	ldd	r25, Y+8	; 0x08
 746:	28 de       	rcall	.-944    	; 0x398 <transmit_block>
 748:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <readyToSend>
 74c:	01 c0       	rjmp	.+2      	; 0x750 <UARTCOM_transmit_block+0x6a>
 74e:	00 e0       	ldi	r16, 0x00	; 0
 750:	80 2f       	mov	r24, r16
 752:	28 96       	adiw	r28, 0x08	; 8
 754:	0f b6       	in	r0, 0x3f	; 63
 756:	f8 94       	cli
 758:	de bf       	out	0x3e, r29	; 62
 75a:	0f be       	out	0x3f, r0	; 63
 75c:	cd bf       	out	0x3d, r28	; 61
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	1f 91       	pop	r17
 764:	0f 91       	pop	r16
 766:	08 95       	ret

00000768 <__udivmodsi4>:
 768:	a1 e2       	ldi	r26, 0x21	; 33
 76a:	1a 2e       	mov	r1, r26
 76c:	aa 1b       	sub	r26, r26
 76e:	bb 1b       	sub	r27, r27
 770:	fd 01       	movw	r30, r26
 772:	0d c0       	rjmp	.+26     	; 0x78e <__udivmodsi4_ep>

00000774 <__udivmodsi4_loop>:
 774:	aa 1f       	adc	r26, r26
 776:	bb 1f       	adc	r27, r27
 778:	ee 1f       	adc	r30, r30
 77a:	ff 1f       	adc	r31, r31
 77c:	a2 17       	cp	r26, r18
 77e:	b3 07       	cpc	r27, r19
 780:	e4 07       	cpc	r30, r20
 782:	f5 07       	cpc	r31, r21
 784:	20 f0       	brcs	.+8      	; 0x78e <__udivmodsi4_ep>
 786:	a2 1b       	sub	r26, r18
 788:	b3 0b       	sbc	r27, r19
 78a:	e4 0b       	sbc	r30, r20
 78c:	f5 0b       	sbc	r31, r21

0000078e <__udivmodsi4_ep>:
 78e:	66 1f       	adc	r22, r22
 790:	77 1f       	adc	r23, r23
 792:	88 1f       	adc	r24, r24
 794:	99 1f       	adc	r25, r25
 796:	1a 94       	dec	r1
 798:	69 f7       	brne	.-38     	; 0x774 <__udivmodsi4_loop>
 79a:	60 95       	com	r22
 79c:	70 95       	com	r23
 79e:	80 95       	com	r24
 7a0:	90 95       	com	r25
 7a2:	9b 01       	movw	r18, r22
 7a4:	ac 01       	movw	r20, r24
 7a6:	bd 01       	movw	r22, r26
 7a8:	cf 01       	movw	r24, r30
 7aa:	08 95       	ret

000007ac <malloc>:
 7ac:	0f 93       	push	r16
 7ae:	1f 93       	push	r17
 7b0:	cf 93       	push	r28
 7b2:	df 93       	push	r29
 7b4:	82 30       	cpi	r24, 0x02	; 2
 7b6:	91 05       	cpc	r25, r1
 7b8:	10 f4       	brcc	.+4      	; 0x7be <malloc+0x12>
 7ba:	82 e0       	ldi	r24, 0x02	; 2
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <__flp>
 7c2:	f0 91 69 02 	lds	r31, 0x0269	; 0x800269 <__flp+0x1>
 7c6:	20 e0       	ldi	r18, 0x00	; 0
 7c8:	30 e0       	ldi	r19, 0x00	; 0
 7ca:	a0 e0       	ldi	r26, 0x00	; 0
 7cc:	b0 e0       	ldi	r27, 0x00	; 0
 7ce:	30 97       	sbiw	r30, 0x00	; 0
 7d0:	19 f1       	breq	.+70     	; 0x818 <malloc+0x6c>
 7d2:	40 81       	ld	r20, Z
 7d4:	51 81       	ldd	r21, Z+1	; 0x01
 7d6:	02 81       	ldd	r16, Z+2	; 0x02
 7d8:	13 81       	ldd	r17, Z+3	; 0x03
 7da:	48 17       	cp	r20, r24
 7dc:	59 07       	cpc	r21, r25
 7de:	c8 f0       	brcs	.+50     	; 0x812 <malloc+0x66>
 7e0:	84 17       	cp	r24, r20
 7e2:	95 07       	cpc	r25, r21
 7e4:	69 f4       	brne	.+26     	; 0x800 <malloc+0x54>
 7e6:	10 97       	sbiw	r26, 0x00	; 0
 7e8:	31 f0       	breq	.+12     	; 0x7f6 <malloc+0x4a>
 7ea:	12 96       	adiw	r26, 0x02	; 2
 7ec:	0c 93       	st	X, r16
 7ee:	12 97       	sbiw	r26, 0x02	; 2
 7f0:	13 96       	adiw	r26, 0x03	; 3
 7f2:	1c 93       	st	X, r17
 7f4:	27 c0       	rjmp	.+78     	; 0x844 <malloc+0x98>
 7f6:	00 93 68 02 	sts	0x0268, r16	; 0x800268 <__flp>
 7fa:	10 93 69 02 	sts	0x0269, r17	; 0x800269 <__flp+0x1>
 7fe:	22 c0       	rjmp	.+68     	; 0x844 <malloc+0x98>
 800:	21 15       	cp	r18, r1
 802:	31 05       	cpc	r19, r1
 804:	19 f0       	breq	.+6      	; 0x80c <malloc+0x60>
 806:	42 17       	cp	r20, r18
 808:	53 07       	cpc	r21, r19
 80a:	18 f4       	brcc	.+6      	; 0x812 <malloc+0x66>
 80c:	9a 01       	movw	r18, r20
 80e:	bd 01       	movw	r22, r26
 810:	ef 01       	movw	r28, r30
 812:	df 01       	movw	r26, r30
 814:	f8 01       	movw	r30, r16
 816:	db cf       	rjmp	.-74     	; 0x7ce <malloc+0x22>
 818:	21 15       	cp	r18, r1
 81a:	31 05       	cpc	r19, r1
 81c:	f9 f0       	breq	.+62     	; 0x85c <malloc+0xb0>
 81e:	28 1b       	sub	r18, r24
 820:	39 0b       	sbc	r19, r25
 822:	24 30       	cpi	r18, 0x04	; 4
 824:	31 05       	cpc	r19, r1
 826:	80 f4       	brcc	.+32     	; 0x848 <malloc+0x9c>
 828:	8a 81       	ldd	r24, Y+2	; 0x02
 82a:	9b 81       	ldd	r25, Y+3	; 0x03
 82c:	61 15       	cp	r22, r1
 82e:	71 05       	cpc	r23, r1
 830:	21 f0       	breq	.+8      	; 0x83a <malloc+0x8e>
 832:	fb 01       	movw	r30, r22
 834:	93 83       	std	Z+3, r25	; 0x03
 836:	82 83       	std	Z+2, r24	; 0x02
 838:	04 c0       	rjmp	.+8      	; 0x842 <malloc+0x96>
 83a:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <__flp+0x1>
 83e:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <__flp>
 842:	fe 01       	movw	r30, r28
 844:	32 96       	adiw	r30, 0x02	; 2
 846:	44 c0       	rjmp	.+136    	; 0x8d0 <malloc+0x124>
 848:	fe 01       	movw	r30, r28
 84a:	e2 0f       	add	r30, r18
 84c:	f3 1f       	adc	r31, r19
 84e:	81 93       	st	Z+, r24
 850:	91 93       	st	Z+, r25
 852:	22 50       	subi	r18, 0x02	; 2
 854:	31 09       	sbc	r19, r1
 856:	39 83       	std	Y+1, r19	; 0x01
 858:	28 83       	st	Y, r18
 85a:	3a c0       	rjmp	.+116    	; 0x8d0 <malloc+0x124>
 85c:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <__brkval>
 860:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <__brkval+0x1>
 864:	23 2b       	or	r18, r19
 866:	41 f4       	brne	.+16     	; 0x878 <malloc+0xcc>
 868:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 86c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 870:	30 93 67 02 	sts	0x0267, r19	; 0x800267 <__brkval+0x1>
 874:	20 93 66 02 	sts	0x0266, r18	; 0x800266 <__brkval>
 878:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 87c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 880:	21 15       	cp	r18, r1
 882:	31 05       	cpc	r19, r1
 884:	41 f4       	brne	.+16     	; 0x896 <malloc+0xea>
 886:	2d b7       	in	r18, 0x3d	; 61
 888:	3e b7       	in	r19, 0x3e	; 62
 88a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 88e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 892:	24 1b       	sub	r18, r20
 894:	35 0b       	sbc	r19, r21
 896:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <__brkval>
 89a:	f0 91 67 02 	lds	r31, 0x0267	; 0x800267 <__brkval+0x1>
 89e:	e2 17       	cp	r30, r18
 8a0:	f3 07       	cpc	r31, r19
 8a2:	a0 f4       	brcc	.+40     	; 0x8cc <malloc+0x120>
 8a4:	2e 1b       	sub	r18, r30
 8a6:	3f 0b       	sbc	r19, r31
 8a8:	28 17       	cp	r18, r24
 8aa:	39 07       	cpc	r19, r25
 8ac:	78 f0       	brcs	.+30     	; 0x8cc <malloc+0x120>
 8ae:	ac 01       	movw	r20, r24
 8b0:	4e 5f       	subi	r20, 0xFE	; 254
 8b2:	5f 4f       	sbci	r21, 0xFF	; 255
 8b4:	24 17       	cp	r18, r20
 8b6:	35 07       	cpc	r19, r21
 8b8:	48 f0       	brcs	.+18     	; 0x8cc <malloc+0x120>
 8ba:	4e 0f       	add	r20, r30
 8bc:	5f 1f       	adc	r21, r31
 8be:	50 93 67 02 	sts	0x0267, r21	; 0x800267 <__brkval+0x1>
 8c2:	40 93 66 02 	sts	0x0266, r20	; 0x800266 <__brkval>
 8c6:	81 93       	st	Z+, r24
 8c8:	91 93       	st	Z+, r25
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <malloc+0x124>
 8cc:	e0 e0       	ldi	r30, 0x00	; 0
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	cf 01       	movw	r24, r30
 8d2:	df 91       	pop	r29
 8d4:	cf 91       	pop	r28
 8d6:	1f 91       	pop	r17
 8d8:	0f 91       	pop	r16
 8da:	08 95       	ret

000008dc <free>:
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	00 97       	sbiw	r24, 0x00	; 0
 8e2:	09 f4       	brne	.+2      	; 0x8e6 <free+0xa>
 8e4:	81 c0       	rjmp	.+258    	; 0x9e8 <free+0x10c>
 8e6:	fc 01       	movw	r30, r24
 8e8:	32 97       	sbiw	r30, 0x02	; 2
 8ea:	13 82       	std	Z+3, r1	; 0x03
 8ec:	12 82       	std	Z+2, r1	; 0x02
 8ee:	a0 91 68 02 	lds	r26, 0x0268	; 0x800268 <__flp>
 8f2:	b0 91 69 02 	lds	r27, 0x0269	; 0x800269 <__flp+0x1>
 8f6:	10 97       	sbiw	r26, 0x00	; 0
 8f8:	81 f4       	brne	.+32     	; 0x91a <free+0x3e>
 8fa:	20 81       	ld	r18, Z
 8fc:	31 81       	ldd	r19, Z+1	; 0x01
 8fe:	82 0f       	add	r24, r18
 900:	93 1f       	adc	r25, r19
 902:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <__brkval>
 906:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <__brkval+0x1>
 90a:	28 17       	cp	r18, r24
 90c:	39 07       	cpc	r19, r25
 90e:	51 f5       	brne	.+84     	; 0x964 <free+0x88>
 910:	f0 93 67 02 	sts	0x0267, r31	; 0x800267 <__brkval+0x1>
 914:	e0 93 66 02 	sts	0x0266, r30	; 0x800266 <__brkval>
 918:	67 c0       	rjmp	.+206    	; 0x9e8 <free+0x10c>
 91a:	ed 01       	movw	r28, r26
 91c:	20 e0       	ldi	r18, 0x00	; 0
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	ce 17       	cp	r28, r30
 922:	df 07       	cpc	r29, r31
 924:	40 f4       	brcc	.+16     	; 0x936 <free+0x5a>
 926:	4a 81       	ldd	r20, Y+2	; 0x02
 928:	5b 81       	ldd	r21, Y+3	; 0x03
 92a:	9e 01       	movw	r18, r28
 92c:	41 15       	cp	r20, r1
 92e:	51 05       	cpc	r21, r1
 930:	f1 f0       	breq	.+60     	; 0x96e <free+0x92>
 932:	ea 01       	movw	r28, r20
 934:	f5 cf       	rjmp	.-22     	; 0x920 <free+0x44>
 936:	d3 83       	std	Z+3, r29	; 0x03
 938:	c2 83       	std	Z+2, r28	; 0x02
 93a:	40 81       	ld	r20, Z
 93c:	51 81       	ldd	r21, Z+1	; 0x01
 93e:	84 0f       	add	r24, r20
 940:	95 1f       	adc	r25, r21
 942:	c8 17       	cp	r28, r24
 944:	d9 07       	cpc	r29, r25
 946:	59 f4       	brne	.+22     	; 0x95e <free+0x82>
 948:	88 81       	ld	r24, Y
 94a:	99 81       	ldd	r25, Y+1	; 0x01
 94c:	84 0f       	add	r24, r20
 94e:	95 1f       	adc	r25, r21
 950:	02 96       	adiw	r24, 0x02	; 2
 952:	91 83       	std	Z+1, r25	; 0x01
 954:	80 83       	st	Z, r24
 956:	8a 81       	ldd	r24, Y+2	; 0x02
 958:	9b 81       	ldd	r25, Y+3	; 0x03
 95a:	93 83       	std	Z+3, r25	; 0x03
 95c:	82 83       	std	Z+2, r24	; 0x02
 95e:	21 15       	cp	r18, r1
 960:	31 05       	cpc	r19, r1
 962:	29 f4       	brne	.+10     	; 0x96e <free+0x92>
 964:	f0 93 69 02 	sts	0x0269, r31	; 0x800269 <__flp+0x1>
 968:	e0 93 68 02 	sts	0x0268, r30	; 0x800268 <__flp>
 96c:	3d c0       	rjmp	.+122    	; 0x9e8 <free+0x10c>
 96e:	e9 01       	movw	r28, r18
 970:	fb 83       	std	Y+3, r31	; 0x03
 972:	ea 83       	std	Y+2, r30	; 0x02
 974:	49 91       	ld	r20, Y+
 976:	59 91       	ld	r21, Y+
 978:	c4 0f       	add	r28, r20
 97a:	d5 1f       	adc	r29, r21
 97c:	ec 17       	cp	r30, r28
 97e:	fd 07       	cpc	r31, r29
 980:	61 f4       	brne	.+24     	; 0x99a <free+0xbe>
 982:	80 81       	ld	r24, Z
 984:	91 81       	ldd	r25, Z+1	; 0x01
 986:	84 0f       	add	r24, r20
 988:	95 1f       	adc	r25, r21
 98a:	02 96       	adiw	r24, 0x02	; 2
 98c:	e9 01       	movw	r28, r18
 98e:	99 83       	std	Y+1, r25	; 0x01
 990:	88 83       	st	Y, r24
 992:	82 81       	ldd	r24, Z+2	; 0x02
 994:	93 81       	ldd	r25, Z+3	; 0x03
 996:	9b 83       	std	Y+3, r25	; 0x03
 998:	8a 83       	std	Y+2, r24	; 0x02
 99a:	e0 e0       	ldi	r30, 0x00	; 0
 99c:	f0 e0       	ldi	r31, 0x00	; 0
 99e:	12 96       	adiw	r26, 0x02	; 2
 9a0:	8d 91       	ld	r24, X+
 9a2:	9c 91       	ld	r25, X
 9a4:	13 97       	sbiw	r26, 0x03	; 3
 9a6:	00 97       	sbiw	r24, 0x00	; 0
 9a8:	19 f0       	breq	.+6      	; 0x9b0 <free+0xd4>
 9aa:	fd 01       	movw	r30, r26
 9ac:	dc 01       	movw	r26, r24
 9ae:	f7 cf       	rjmp	.-18     	; 0x99e <free+0xc2>
 9b0:	8d 91       	ld	r24, X+
 9b2:	9c 91       	ld	r25, X
 9b4:	11 97       	sbiw	r26, 0x01	; 1
 9b6:	9d 01       	movw	r18, r26
 9b8:	2e 5f       	subi	r18, 0xFE	; 254
 9ba:	3f 4f       	sbci	r19, 0xFF	; 255
 9bc:	82 0f       	add	r24, r18
 9be:	93 1f       	adc	r25, r19
 9c0:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <__brkval>
 9c4:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <__brkval+0x1>
 9c8:	28 17       	cp	r18, r24
 9ca:	39 07       	cpc	r19, r25
 9cc:	69 f4       	brne	.+26     	; 0x9e8 <free+0x10c>
 9ce:	30 97       	sbiw	r30, 0x00	; 0
 9d0:	29 f4       	brne	.+10     	; 0x9dc <free+0x100>
 9d2:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <__flp+0x1>
 9d6:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__flp>
 9da:	02 c0       	rjmp	.+4      	; 0x9e0 <free+0x104>
 9dc:	13 82       	std	Z+3, r1	; 0x03
 9de:	12 82       	std	Z+2, r1	; 0x02
 9e0:	b0 93 67 02 	sts	0x0267, r27	; 0x800267 <__brkval+0x1>
 9e4:	a0 93 66 02 	sts	0x0266, r26	; 0x800266 <__brkval>
 9e8:	df 91       	pop	r29
 9ea:	cf 91       	pop	r28
 9ec:	08 95       	ret

000009ee <_exit>:
 9ee:	f8 94       	cli

000009f0 <__stop_program>:
 9f0:	ff cf       	rjmp	.-2      	; 0x9f0 <__stop_program>
